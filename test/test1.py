import sys
sys.stdin = open("input1.txt")

# 테스트케이스 횟수가 몇 회인지 입력받는다.
T = int(input())
# 테스트케이스를 순환하면서
for tc in range(1,T+1):
    # 지하철 역의 개수를 입력받는다.
    N = int(input())
    # 해당 지하철 역의 하루 이용객 수를 입력받는다.
    passenger = list(map(int, input().split()))
    # 1. 2개의 직통 노선은 서로 교차할 수 없다.
        # passenger[a], passenger[b]가 연결되면, 나머지 2개의 노선의 인덱스 범위 i는 0<i<a 또는 a<i<k 또는 k<i<length(passenger)이다.
    # 2. 인접한 두 역을 연결하는 직통 노선은 건설할 수 없다.
    # a와 b는 각각 지하철역의 인덱스
    # (리스트의 없는 인덱스를 체크하는것을 방지하기위해)
    # 만약 a가 b보다 작

    # 3. 인접한 두 역에서 출발하거나, 인접한 두 역으로 도착하는 직통 노선은 건설할 수 없다.
    # 4. 1개의 역에 2개의 직통 노선이 있어서는 안 된다.
    a = sorted(passenger)
    print(N)
    print(passenger)
    print(a)


# 1개의 지하철 노선이 N개의 지하철역을 순환한다.
# 아래 그림은 N = 10인 지하철 노선도이며, 숫자는 하루 이용객 수를 의미한다.
# 지하철이 붐비어 2개의 직통 노선을 추가로 건설하려 한다.
# 2개의 직통 노선은 타당도가 가장 높은 값이 되도록 건설해야 하며, 타당도를 계산하는 방법은 아래와 같다.
# (A+B)**2 + (C+D)**2
# (A, B, C, D 는 각 지하철 역의 이용객 숫자이다.)

# 단, 2개의 직통 노선을 건설할 때는 아래 4가지 조건을 만족해야 한다.
# 1. 2개의 직통 노선은 서로 교차할 수 없다.
# 2. 인접한 두 역을 연결하는 직통 노선은 건설할 수 없다.
# 3. 인접한 두 역에서 출발하거나, 인접한 두 역으로 도착하는 직통 노선은 건설할 수 없다.
# 4. 1개의 역에 2개의 직통 노선이 있어서는 안 된다.
# N개 지하철역의 이용객 숫자가 주어질 때, 타당도가 가장 높은 값이 되도록, 2개의 직통 노선을 건설하고, 이 때 타당도 값을 구하라!
# 제약사항
# 8 <= N <= 20
# 지하철 역의 이용객 숫자는 1 이상 1,000 이하다.

# 목표
# 최대 타당도 값을 구하라.